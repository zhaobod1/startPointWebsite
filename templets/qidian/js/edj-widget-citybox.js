/**
 * Created by zws on 14-12-3.
 */
var SCity = {};
(function($, NS) {
    // 搜索城市字母顺序
    var SC = function(params) {
        this.target = params.target;
        this.callback = params.callback;
        this.method = params.method;
    };
    SC.prototype = {
        templ: '<div class="ws-edj-option-box-container"><div class="ws-edj-search-box"><label class="ws-edj-search-input">请选择</label><div class="ws-edj-hot-word"></div><button type="button" class="ws-close" style="margin:10px 15px;font-size: 20px;">×</button></div><div class="ws-edj-letter-tabs">{{~it :value:index}}{{? index===0 }}<a data-content-id="{{=value.groupKey}}" href="javascript:void(0)" class="ws-edj-letter-tab-item ws-edj-letter-tab-active ws-edj-letter-tab-first"><span>{{=value.groupKey}}</span></a>{{??}}<a data-content-id="{{=value.groupKey}}" href="javascript:void(0)" class="ws-edj-letter-tab-item"><span>{{=value.groupKey}}</span></a>{{?}}{{~}}</div><div class="ws-edj-content-container">{{~it :value:index}}{{? index===0 }}<div data-content-id="{{=value.groupKey}}" class="ws-edj-tag-container">{{??}}<div data-content-id="{{=value.groupKey}}" class="ws-edj-tag-container" style="display:none">{{?}}{{ for (var j = 0,item=value.groupList, jLen = item.length; j < jLen; j++) { }}<dl class="ws-edj-letter-row"><dt>{{=item[j].key}}</dt><dd><ul>{{ for (var k = 0,list=item[j].list, kLen = list.length; k < kLen; k++) { }}<li><a data-pinyin="{{=item[j].key}}" data-fee_id="{{=list[k].id}}" data-name="{{=list[k].val}}" class="ws-edj-item-btn" href="javascript:void(0)">{{=list[k].val}}</a></li>{{ } }}</ul></dd></dl>{{ } }}</div>{{~}}</div></div>',
        init: function() {
            var that = this;
            that.render();
            that.bindEvt();
        },
        render: function() {},
        bindEvt: function() {
            var that = this;
            $("body").remove("div.ws-edj-option-box-container");
            window.setTimeout(function() {
                $(that.target).on("click", function() {
                    that.doSCity();
                });
                $("body").delegate("div.ws-edj-option-box-container > div.ws-edj-letter-tabs a", "click", function() {
                    var self = $(this);
                    self.addClass("ws-edj-letter-tab-active").siblings().removeClass("ws-edj-letter-tab-active");
                    var showEle = self.parent().next()
                        .find("div.ws-edj-tag-container[data-content-id='" + self.attr("data-content-id") + "']");
                    showEle.show().siblings().hide();
                });
                $("body").delegate("button.ws-close", "click", function() {
                    that.close();
                });
                $(($.browser.msie) ? document : window).on("click", function(ev) {
                    ev = ev || window.event;
                    var srcEvt = ev.target || ev.srcElement;
                    var id = ev.target ? $(ev.target).attr("id") : ev.srcElement.getAttribute("id");
                    if (id != that.target.substr(1) && $(srcEvt).closest("div.ws-edj-option-box-container").length <= 0) {
                        that.close();
                    }
                });
            }, 100);
        },
        doSCity: function() {
            var that = this;
            if ($("div.ws-edj-option-box-container").length) {
                that.open();
                return false;
            }
            var mCityList = {
                method: that.method
            }
            $.when(Common.getRequest(mCityList)).then(function(d) {
                if (!CU.isSucceed(d)) {
                    return false;
                }
                var lCities = doT.template(that.templ);
                var viewData = that.pym.parseCity(d.cityList);
                var count = viewData.length;
                $("body").append(lCities(viewData)).append(function() {
                    $("div.ws-edj-search-box > label").show();
                    $("div.ws-edj-option-box-container a").css({
                        "word-break": "keep-all",
                        "white-space": "nowrap"
                    });
                    $("div.ws-edj-content-container a").on("click", function() {
                        $(that.target).val($(this).data("name")).attr("data-fee_id", $(this).data("fee_id"));
                        that.callback({
                            "id": $(this).data("fee_id"),
                            text: $(this).data("name")
                        });
                        that.close();
                    });
                    that.setTabWidth({
                        count: count,
                        box: $("div.ws-edj-letter-tabs"),
                        eles: $("div.ws-edj-letter-tabs > a"),
                        target: that.target,
                        pos: $("div.ws-edj-option-box-container")
                    });
                });
                that.open();
            });
        },
        setTabWidth: function(params) {
            params = params || {};
            var width = "100px";
            var count = params.count,
                box = params.box,
                eles = params.eles,
                target = params.target,
                pos = params.pos;
            eles.css({
                "width": (100 / count) + "%",
                "text-align": "center"
            });
            pos.css({
                "margin-left": "-350px",
                "margin-top": (-1 * pos.height() / 2) + "px"
            });
            var browser = navigator.appName
            var b_version = navigator.appVersion
            var version = b_version.split(";");
            var trim_Version = version.length > 1 && version[1].replace(/[ ]/g, "");
            if (browser == "Microsoft Internet Explorer" && trim_Version == "MSIE6.0" || trim_Version == "MSIE7.0") {
                eles.last().css({
                    "width": (100 / count - 0.5) + "%"
                });
                pos.css({
                    "margin-left": (-1 * pos.width() / 2) + "px"
                });
            }
        },
        open: function() {
            $("div.ws-edj-option-box-container").show("fast");
            if($('div.ie-select-iframe').size()>0){
                $('div.ie-select-iframe').show();
            }else{
                $('body').append('<iframe class="ie-select-iframe" style="height:100%;width:100%;position:absolute;top:0;left:0;z-index:-1;" scrolling="no" frameborder="0"></iframe>')
            }
        },
        close: function() {
            $("div.ws-edj-option-box-container").hide("fast");
            $('div.ie-select-iframe').hide();
        },
        pym: {
            // 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 ToChineseSpell
            //函数使用,本表收录的字符的Unicode编码范围为19968至40869, XDesigner 整理
            strChineseFirstPY: "",
            //此处收录了375个多音字,数据来自于http://www.51window.net/page/pinyin
            oMultiDiff: {
                "19969": "DZ",
                "19975": "WM",
                "19988": "QJ",
                "20048": "YL",
                "20056": "SC",
                "20060": "NM",
                "20094": "QG",
                "20127": "QJ",
                "20167": "QC",
                "20193": "YG",
                "20250": "KH",
                "20256": "ZC",
                "20282": "SC",
                "20285": "QJG",
                "20291": "TD",
                "20314": "YD",
                "20315": "FB", //佛
                "20340": "NE",
                "20375": "TD",
                "20389": "YJ",
                "20391": "CZ",
                "20415": "PB",
                "20446": "YS",
                "20447": "SQ",
                "20504": "TC",
                "20608": "KG",
                "20854": "QJ",
                "20857": "ZC",
                "20911": "PF",
                "20504": "TC",
                "20608": "KG",
                "20854": "QJ",
                "20857": "ZC",
                "20911": "PF",
                "20985": "AW",
                "21032": "PB",
                "21048": "XQ",
                "21049": "SC",
                "21089": "YS",
                "21119": "JC",
                "21242": "SB",
                "21273": "SC",
                "21305": "YP",
                "21306": "QO",
                "21330": "ZC",
                "21333": "SDC",
                "21345": "QK",
                "21378": "CA",
                "21397": "SC",
                "21414": "XS",
                "21442": "SC",
                "21477": "JG",
                "21480": "TD",
                "21484": "ZS",
                "21494": "YX",
                "21505": "YX",
                "21512": "HG",
                "21523": "XH",
                "21537": "PB",
                "21542": "PF",
                "21549": "KH",
                "21571": "E",
                "21574": "DA",
                "21588": "TD",
                "21589": "O",
                "21618": "ZC",
                "21621": "KHA",
                "21632": "ZJ",
                "21654": "KG",
                "21679": "LKG",
                "21683": "KH",
                "21710": "A",
                "21719": "YH",
                "21734": "WOE",
                "21769": "A",
                "21780": "WN",
                "21804": "XH",
                "21834": "A",
                "21899": "ZD",
                "21903": "RN",
                "21908": "WO",
                "21939": "ZC",
                "21956": "SA",
                "21964": "YA",
                "21970": "TD",
                "22003": "A",
                "22031": "JG",
                "22040": "XS",
                "22060": "ZC",
                "22066": "ZC",
                "22079": "MH",
                "22129": "XJ",
                "22179": "XA",
                "22237": "NJ",
                "22244": "TD",
                "22280": "JQ",
                "22300": "YH",
                "22313": "XW",
                "22331": "YQ",
                "22343": "YJ",
                "22351": "PH",
                "22395": "DC",
                "22412": "TD",
                "22484": "PB",
                "22500": "PB",
                "22534": "ZD",
                "22549": "DH",
                "22561": "PB",
                "22612": "TD",
                "22771": "KQ",
                "22831": "HB",
                "22841": "JG",
                "22855": "QJ",
                "22865": "XQ",
                "23013": "ML",
                "23081": "WM",
                "23487": "SX",
                "23558": "QJ",
                "23561": "YW",
                "23586": "YW",
                "23614": "YW",
                "23615": "SN",
                "23631": "PB",
                "23646": "ZS",
                "23663": "ZT",
                "23673": "YG",
                "23762": "TD",
                "23769": "ZS",
                "23780": "QJ",
                "23884": "QK",
                "24055": "XH",
                "24113": "DC",
                "24162": "ZC",
                "24191": "GA",
                "24273": "QJ",
                "24324": "NL",
                "24377": "TD",
                "24378": "QJ",
                "24439": "PF",
                "24554": "ZS",
                "24683": "TD",
                "24694": "WE",
                "24733": "LK",
                "24925": "TN",
                "25094": "ZG",
                "25100": "XQ",
                "25103": "XH",
                "25153": "PB",
                "25170": "PB",
                "25179": "KG",
                "25203": "PB",
                "25240": "ZS",
                "25282": "FB",
                "25303": "NA",
                "25324": "KG",
                "25341": "ZY",
                "25373": "WZ",
                "25375": "XJ",
                "25384": "A",
                "25457": "A",
                "25528": "SD",
                "25530": "SC",
                "25552": "TD",
                "25774": "ZC",
                "25874": "ZC",
                "26044": "YW",
                "26080": "WM",
                "26292": "PB",
                "26333": "PB",
                "26355": "ZY",
                "26366": "CZ",
                "26397": "ZC",
                "26399": "QJ",
                "26415": "ZS",
                "26451": "SB",
                "26526": "ZC",
                "26552": "JG",
                "26561": "TD",
                "26588": "JG",
                "26597": "CZ",
                "26629": "ZS",
                "26638": "YL",
                "26646": "XQ",
                "26653": "KG",
                "26657": "XJ",
                "26727": "HG",
                "26894": "ZC",
                "26937": "ZS",
                "26946": "ZC",
                "26999": "KJ",
                "27099": "KJ",
                "27449": "YQ",
                "27481": "XS",
                "27542": "ZS",
                "27663": "ZS",
                "27748": "TS",
                "27784": "SC",
                "27788": "ZD",
                "27795": "TD",
                "27812": "O",
                "27850": "PB",
                "27852": "MB",
                "27895": "SL",
                "27898": "PL",
                "27973": "QJ",
                "27981": "KH",
                "27986": "HX",
                "27994": "XJ",
                "28044": "YC",
                "28065": "WG",
                "28177": "SM",
                "28267": "QJ",
                "28291": "KH",
                "28337": "ZQ",
                "28463": "TL",
                "28548": "DC",
                "28601": "TD",
                "28689": "PB",
                "28805": "JG",
                "28820": "QG",
                "28846": "PB",
                "28952": "TD",
                "28975": "ZC",
                "29100": "A",
                "29325": "QJ",
                "29575": "SL",
                "29602": "FB",
                "30010": "TD",
                "30044": "CX",
                "30058": "PF",
                "30091": "YSP",
                "30111": "YN",
                "30229": "XJ",
                "30427": "SC",
                "30465": "SX",
                "30631": "YQ",
                "30655": "QJ",
                "30684": "QJG",
                "30707": "SD",
                "30729": "XH",
                "30796": "LG",
                "30917": "PB",
                "31074": "NM",
                "31085": "JZ",
                "31109": "SC",
                "31181": "ZC",
                "31192": "MLB",
                "31293": "JQ",
                "31400": "YX",
                "31584": "YJ",
                "31896": "ZN",
                "31909": "ZY",
                "31995": "XJ",
                "32321": "PF",
                "32327": "ZY",
                "32418": "HG",
                "32420": "XQ",
                "32421": "HG",
                "32438": "LG",
                "32473": "GJ",
                "32488": "TD",
                "32521": "QJ",
                "32527": "PB",
                "32562": "ZSQ",
                "32564": "JZ",
                "32735": "ZD",
                "32793": "PB",
                "33071": "PF",
                "33098": "XL",
                "33100": "YA",
                "33152": "PB",
                "33261": "CX",
                "33324": "BP",
                "33333": "TD",
                "33406": "YA",
                "33426": "WM",
                "33432": "PB",
                "33445": "JG",
                "33486": "ZN",
                "33493": "TS",
                "33507": "QJ",
                "33540": "QJ",
                "33544": "ZC",
                "33564": "XQ",
                "33617": "YT",
                "33632": "QJ",
                "33636": "XH",
                "33637": "YX",
                "33694": "WG",
                "33705": "PF",
                "33728": "YW",
                "33882": "SR",
                "34067": "WM",
                "34074": "YW",
                "34121": "QJ",
                "34255": "ZC",
                "34259": "XL",
                "34425": "JH",
                "34430": "XH",
                "34485": "KH",
                "34503": "YS",
                "34532": "HG",
                "34552": "XS",
                "34558": "YE",
                "34593": "ZL",
                "34660": "YQ",
                "34892": "XH",
                "34928": "SC",
                "34999": "QJ",
                "35048": "PB",
                "35059": "SC",
                "35098": "ZC",
                "35203": "TQ",
                "35265": "JX",
                "35299": "JX",
                "35782": "SZ",
                "35828": "YS",
                "35830": "E",
                "35843": "TD",
                "35895": "YG",
                "35977": "MH",
                "36158": "JG",
                "36228": "QJ",
                "36426": "XQ",
                "36466": "DC",
                "36710": "JC",
                "36711": "ZYG",
                "36767": "PB",
                "36866": "SK",
                "36951": "YW",
                "37034": "YX",
                "37063": "XH",
                "37218": "ZC",
                "37325": "ZC",
                "38063": "PB",
                "38079": "TD",
                "38085": "QY",
                "38107": "DC",
                "38116": "TD",
                "38123": "YD",
                "38224": "HG",
                "38241": "XTC",
                "38271": "ZC",
                "38415": "YE",
                "38426": "KH",
                "38461": "YD",
                "38463": "AE",
                "38466": "PB",
                "38477": "XJ",
                "38518": "YT",
                "38551": "WK",
                "38585": "ZC",
                "38704": "XS",
                "38739": "LJ",
                "38761": "GJ",
                "38808": "SQ",
                "39048": "JG",
                "39049": "XJ",
                "39052": "HG",
                "39076": "CZ",
                "39271": "XT",
                "39534": "TD",
                "39552": "TD",
                "39584": "PB",
                "39647": "SB",
                "39730": "LG",
                "39748": "TPB",
                "40109": "ZQ",
                "40479": "ND",
                "40516": "HG",
                "40536": "HG",
                "40583": "QJ",
                "40765": "YQ",
                "40784": "QJ",
                "40840": "YK",
                "40863": "QJG"
            },
            itemCount: 6, // 每个导航字母个数
            // 解析json数据返回对应的首字母
            parseCity: function(map) {
                var that = this;
                map = map || {};
                var preps = [],
                    tmpKey = "",
                    rlKey = [],
                    rKey = "";
                for (var it in map) {
                    rlKey = that.makePy(it.substr(0, 1));
                    if (rlKey.length > 1) {
                        rKey = that.getRightKey(it);
                        tmpKey = (rKey ? rKey : rlKey[0]);
                    } else {
                        tmpKey = rlKey[0];
                    }
                    preps.push({
                        key: tmpKey,
                        val: it,
                        id: map[it]
                    });
                }
                // chrome Array.sort bug 自定义排序
                preps = that.qsort(preps);
                var res = [],
                    temp = {
                        key: "",
                        list: []
                    },
                    tempArr = [],
                    count = 0,
                    tempKey = [],
                    item = {};
                for (var i = 0, len = preps.length; i < len; i++) {
                    item = preps[i];
                    if (item.key) {
                        if (temp.key != item.key) {
                            if (temp.key != "") {
                                tempArr.push(temp);
                                if (count % that.itemCount == 0) {
                                    res.push({
                                        groupKey: tempKey.join(""),
                                        groupList: tempArr.splice(0, that.itemCount)
                                    });
                                    tempKey.splice(0, that.itemCount);
                                }
                            }
                            temp = {
                                key: item.key,
                                list: []
                            };
                            tempKey.push(item.key);
                            count++;
                        }
                        temp.list.push({
                            val: item.val,
                            id: item.id
                        });
                    }
                }
                if (tempKey.length >= 0) {
                    tempArr.push(temp);
                    res.push({
                        groupKey: tempKey.join(""),
                        groupList: tempArr.splice(0, that.itemCount)
                    });
                }
                return res;
            },
            // 快速排序 arr待排序的数组
            qsort: function(arr) {
                if (arr.length <= 1) {
                    return arr;
                }
                var pivotIndex = Math.floor(arr.length / 2);
                var pivot = arr.splice(pivotIndex, 1)[0];
                var left = [];
                var right = [];
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i].key < pivot.key) {
                        left.push(arr[i]);
                    } else {
                        right.push(arr[i]);
                    }
                }
                return this.qsort(left).concat([pivot], this.qsort(right));
            },
            //获取正确的key值(多音字特殊处理)
            getRightKey: function(val) {
                var prep = {
                    "重庆": "C",
                    "长沙": "C",
                    "长兴": "C",
                    "长沙县": "C",
                    "朝阳": "C",
                    "长春": "C",
                    "长治": "C",
                    "长乐": "C",
                    "佛山": "F",
                    "广州": "G",
                    "广元": "G",
                    "合肥": "H",
                    "漯河": "L",
                    "乐山": "L",
                    "沈阳": "S",
                    "石家庄": "S",
                    "宿迁": "S",
                    "宿州": "S",
                    "无锡": "W",
                    "厦门": "X"
                };
                return prep[val || ""];
            },
            //参数,中文字符串
            //返回值:拼音首字母串数组
            makePy: function(str) {
                var that = this;
                if (typeof(str) != "string")
                    throw new Error(-1, "函数makePy需要字符串类型参数!");
                var arrResult = new Array(); //保存中间结果的数组
                for (var i = 0, len = str.length; i < len; i++) {
                    //获得unicode码
                    var ch = str.charAt(i);
                    //检查该unicode码是否在处理范围之内,在则返回该码对映汉字的拼音首字母,不在则调用其它函数处理
                    arrResult.push(that.checkCh(ch));
                }
                //处理arrResult,返回所有可能的拼音首字母串数组
                return that.mkRslt(arrResult);
            },
            checkCh: function(ch) {
                var that = this;
                var uni = ch.charCodeAt(0);
                //如果不在汉字处理范围之内,返回原字符,也可以调用自己的处理函数
                if (uni > 40869 || uni < 19968)
                    return ch; //dealWithOthers(ch);
                //检查是否是多音字,是按多音字处理,不是就直接在strChineseFirstPY字符串中找对应的首字母
                return (that.oMultiDiff[uni] ? that.oMultiDiff[uni] : (that.strChineseFirstPY.charAt(uni - 19968)));
            },
            mkRslt: function(arr) {
                var arrRslt = [""];
                for (var i = 0, len = arr.length; i < len; i++) {
                    var str = arr[i];
                    var strlen = str.length;
                    if (strlen == 1) {
                        for (var k = 0; k < arrRslt.length; k++) {
                            arrRslt[k] += str;
                        }
                    } else {
                        var tmpArr = arrRslt.slice(0);
                        arrRslt = [];
                        for (k = 0; k < strlen; k++) {
                            //复制一个相同的arrRslt
                            var tmp = tmpArr.slice(0);
                            //把当前字符str[k]添加到每个元素末尾
                            for (var j = 0; j < tmp.length; j++) {
                                tmp[j] += str.charAt(k);
                            }
                            //把复制并修改后的数组连接到arrRslt上
                            arrRslt = arrRslt.concat(tmp);
                        }
                    }
                }
                return arrRslt;
            }
        }
    };
    NS.init = function(params) {
        params = params || null;
        if (params != null) {
            new SC(params).init();
        } else {
            alert("插件参数不能为空");
        }
    };
})(jQuery, SCity);
// doT.js
// 2011, Laura Doktorova, https://github.com/olado/doT
// Licensed under the MIT license.

(function() {
    "use strict";

    var doT = {
            version: '1.0.1',
            templateSettings: {
                evaluate: /\{\{([\s\S]+?(\}?)+)\}\}/g,
                interpolate: /\{\{=([\s\S]+?)\}\}/g,
                encode: /\{\{!([\s\S]+?)\}\}/g,
                use: /\{\{#([\s\S]+?)\}\}/g,
                useParams: /(^|[^\w$])def(?:\.|\[[\'\"])([\w$\.]+)(?:[\'\"]\])?\s*\:\s*([\w$\.]+|\"[^\"]+\"|\'[^\']+\'|\{[^\}]+\})/g,
                define: /\{\{##\s*([\w\.$]+)\s*(\:|=)([\s\S]+?)#\}\}/g,
                defineParams: /^\s*([\w$]+):([\s\S]+)/,
                conditional: /\{\{\?(\?)?\s*([\s\S]*?)\s*\}\}/g,
                iterate: /\{\{~\s*(?:\}\}|([\s\S]+?)\s*\:\s*([\w$]+)\s*(?:\:\s*([\w$]+))?\s*\}\})/g,
                varname: 'it',
                strip: true,
                append: true,
                selfcontained: false
            },
            template: undefined, //fn, compile template
            compile: undefined //fn, for express
        },
        global;

    if (typeof module !== 'undefined' && module.exports) {
        module.exports = doT;
    } else if (typeof define === 'function' && define.amd) {
        define(function() {
            return doT;
        });
    } else {
        global = (function() {
            return this || (0, eval)('this');
        }());
        global.doT = doT;
    }

    function encodeHTMLSource() {
        var encodeHTMLRules = {
                "&": "&#38;",
                "<": "&#60;",
                ">": "&#62;",
                '"': '&#34;',
                "'": '&#39;',
                "/": '&#47;'
            },
            matchHTML = /&(?!#?\w+;)|<|>|"|'|\//g;
        return function() {
            return this ? this.replace(matchHTML, function(m) {
                return encodeHTMLRules[m] || m;
            }) : this;
        };
    }

    String.prototype.encodeHTML = encodeHTMLSource();

    var startend = {
            append: {
                start: "'+(",
                end: ")+'",
                endencode: "||'').toString().encodeHTML()+'"
            },
            split: {
                start: "';out+=(",
                end: ");out+='",
                endencode: "||'').toString().encodeHTML();out+='"
            }
        },
        skip = /$^/;

    function resolveDefs(c, block, def) {
        return ((typeof block === 'string') ? block : block.toString())
            .replace(c.define || skip, function(m, code, assign, value) {
                if (code.indexOf('def.') === 0) {
                    code = code.substring(4);
                }
                if (!(code in def)) {
                    if (assign === ':') {
                        if (c.defineParams) value.replace(c.defineParams, function(m, param, v) {
                            def[code] = {
                                arg: param,
                                text: v
                            };
                        });
                        if (!(code in def)) def[code] = value;
                    } else {
                        new Function("def", "def['" + code + "']=" + value)(def);
                    }
                }
                return '';
            })
            .replace(c.use || skip, function(m, code) {
                if (c.useParams) code = code.replace(c.useParams, function(m, s, d, param) {
                    if (def[d] && def[d].arg && param) {
                        var rw = (d + ":" + param).replace(/'|\\/g, '_');
                        def.__exp = def.__exp || {};
                        def.__exp[rw] = def[d].text.replace(new RegExp("(^|[^\\w$])" + def[d].arg + "([^\\w$])", "g"), "$1" + param + "$2");
                        return s + "def.__exp['" + rw + "']";
                    }
                });
                var v = new Function("def", "return " + code)(def);
                return v ? resolveDefs(c, v, def) : v;
            });
    }

    function unescape(code) {
        return code.replace(/\\('|\\)/g, "$1").replace(/[\r\t\n]/g, ' ');
    }

    doT.template = function(tmpl, c, def) {
        c = c || doT.templateSettings;
        var cse = c.append ? startend.append : startend.split,
            needhtmlencode, sid = 0,
            indv,
            str = (c.use || c.define) ? resolveDefs(c, tmpl, def || {}) : tmpl;

        str = ("var out='" + (c.strip ? str.replace(/(^|\r|\n)\t* +| +\t*(\r|\n|$)/g, ' ')
                    .replace(/\r|\n|\t|\/\*[\s\S]*?\*\//g, '') : str)
                .replace(/'|\\/g, '\\$&')
                .replace(c.interpolate || skip, function(m, code) {
                    return cse.start + unescape(code) + cse.end;
                })
                .replace(c.encode || skip, function(m, code) {
                    needhtmlencode = true;
                    return cse.start + unescape(code) + cse.endencode;
                })
                .replace(c.conditional || skip, function(m, elsecase, code) {
                    return elsecase ?
                        (code ? "';}else if(" + unescape(code) + "){out+='" : "';}else{out+='") :
                        (code ? "';if(" + unescape(code) + "){out+='" : "';}out+='");
                })
                .replace(c.iterate || skip, function(m, iterate, vname, iname) {
                    if (!iterate) return "';} } out+='";
                    sid += 1;
                    indv = iname || "i" + sid;
                    iterate = unescape(iterate);
                    return "';var arr" + sid + "=" + iterate + ";if(arr" + sid + "){var " + vname + "," + indv + "=-1,l" + sid + "=arr" + sid + ".length-1;while(" + indv + "<l" + sid + "){" + vname + "=arr" + sid + "[" + indv + "+=1];out+='";
                })
                .replace(c.evaluate || skip, function(m, code) {
                    return "';" + unescape(code) + "out+='";
                }) + "';return out;")
            .replace(/\n/g, '\\n').replace(/\t/g, '\\t').replace(/\r/g, '\\r')
            .replace(/(\s|;|\}|^|\{)out\+='';/g, '$1').replace(/\+''/g, '')
            .replace(/(\s|;|\}|^|\{)out\+=''\+/g, '$1out+=');

        if (needhtmlencode && c.selfcontained) {
            str = "String.prototype.encodeHTML=(" + encodeHTMLSource.toString() + "());" + str;
        }
        try {
            return new Function(c.varname, str);
        } catch (e) {
            if (typeof console !== 'undefined') console.log("Could not create a template function: " + str);
            throw e;
        }
    };

    doT.compile = function(tmpl, def) {
        return doT.template(tmpl, null, def);
    };
}());
